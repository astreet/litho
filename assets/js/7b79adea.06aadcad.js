"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5171],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>d,mdx:()=>f,useMDXComponents:()=>s,withMDXComponents:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),m=function(e){return function(t){var n=s(t.components);return a.createElement(e,r({},t,{components:n}))}},s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var a=n(67294),o=n(34334);const r="tabItem_Ymn6";function l(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:n},t)}},65488:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var a=n(83117),o=n(67294),r=n(34334),l=n(72389),i=n(67392),c=n(7094),p=n(12466);const m="tabList__CuJ",s="tabItem_LNqP";function d(e){var t,n,l=e.lazy,d=e.block,u=e.defaultValue,h=e.values,f=e.groupId,x=e.className,y=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:y.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,i.l)(v,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===u?u:null!=(t=null!=u?u:null==(n=y.find((function(e){return e.props.default})))?void 0:n.props.value)?t:y[0].props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var C=(0,c.U)(),w=C.tabGroupChoices,N=C.setTabGroupChoices,T=(0,o.useState)(b),k=T[0],S=T[1],O=[],j=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var E=w[f];null!=E&&E!==k&&v.some((function(e){return e.value===E}))&&S(E)}var L=function(e){var t=e.currentTarget,n=O.indexOf(t),a=v[n].value;a!==k&&(j(t),S(a),null!=f&&N(f,String(a)))},P=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,o=O.indexOf(e.currentTarget)+1;n=null!=(a=O[o])?a:O[0];break;case"ArrowLeft":var r,l=O.indexOf(e.currentTarget)-1;n=null!=(r=O[l])?r:O[O.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",m)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},x)},v.map((function(e){var t=e.value,n=e.label,l=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:function(e){return O.push(e)},onKeyDown:P,onFocus:L,onClick:L},l,{className:(0,r.Z)("tabs__item",s,null==l?void 0:l.className,{"tabs__item--active":k===t})}),null!=n?n:t)}))),l?(0,o.cloneElement)(y.filter((function(e){return e.props.value===k}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},y.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==k})}))))}function u(e){var t=(0,l.default)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},27749:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>x,frontMatter:()=>m,metadata:()=>d,toc:()=>h});var a=n(83117),o=n(80102),r=(n(67294),n(3905)),l=n(65488),i=n(85162),c=n(44996),p=["components"],m={id:"layout-specs",title:"Layout Specs"},s=void 0,d={unversionedId:"codegen/layout-specs",id:"codegen/layout-specs",title:"Layout Specs",description:"This page covers the old Java Spec API. If you're not using the Spec API, refer to the Components page.",source:"@site/../docs/codegen/layout-specs.mdx",sourceDirName:"codegen",slug:"/codegen/layout-specs",permalink:"/docs/codegen/layout-specs",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/codegen/layout-specs.mdx",tags:[],version:"current",frontMatter:{id:"layout-specs",title:"Layout Specs"},sidebar:"mainSidebar",previous:{title:"Introduction",permalink:"/docs/codegen/overview"},next:{title:"Mount Specs",permalink:"/docs/codegen/mount-specs"}},u={},h=[],f={toc:h};function x(e){var t=e.components,n=(0,o.Z)(e,p);return(0,r.mdx)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("admonition",{type:"caution"},(0,r.mdx)("p",{parentName:"admonition"},"This page covers the old Java Spec API. If you're not using the Spec API, refer to the ",(0,r.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/components-basics"},"Components")," page.")),(0,r.mdx)(l.default,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,r.mdx)(i.default,{value:"java",mdxType:"TabItem"},(0,r.mdx)("p",null,"A ",(0,r.mdx)("em",{parentName:"p"},"layout spec")," is the logical equivalent of a composite view on Android; it simply groups existing components together in an immutable layout tree."),(0,r.mdx)("p",null,"Implementing a layout spec is very simple: just write one method annotated with ",(0,r.mdx)("inlineCode",{parentName:"p"},"@OnCreateLayout"),", which returns an immutable tree of ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/Component.html"},"Component")," objects."),(0,r.mdx)("p",null,"Following is a simple example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"@LayoutSpec\npublic class MyComponentSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c,\n      @Prop int color,\n      @Prop String title) {\n      return Row.create(c)\n          .alignItems(CENTER)\n          .child(\n              SolidColor.create(c)\n                  .colorRes(color)\n                  .widthDip(40)\n                  .heightDip(40))\n          .child(\n              Text.create(c)\n                  .text(title)\n                  .textSizeRes(R.dimen.my_text_size)\n                  .flexGrow(1f))\n          .build();\n  }\n}\n")),(0,r.mdx)("p",null,"As can be seen from the example above, layout spec classes use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"@LayoutSpec")," annotation."),(0,r.mdx)("p",null,"The method annotated with ",(0,r.mdx)("inlineCode",{parentName:"p"},"@OnCreateLayout")," must have ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/ComponentContext.html"},"ComponentContext")," as its first argument followed by a list of arguments annotated with ",(0,r.mdx)("inlineCode",{parentName:"p"},"@Prop"),". The annotation processor will validate this and other invariants in the API at build time."),(0,r.mdx)("p",null,"In the example above, the layout tree has a root ",(0,r.mdx)("em",{parentName:"p"},"Container")," with two children stacked horizontally (",(0,r.mdx)("inlineCode",{parentName:"p"},"Row.create"),") and vertically centered (",(0,r.mdx)("inlineCode",{parentName:"p"},"Align.CENTER"),")."),(0,r.mdx)("p",null,"The first child is a ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/SolidColor.html"},"SolidColor")," component that takes a ",(0,r.mdx)("inlineCode",{parentName:"p"},"colorRes")," prop and has a 40dp width and height:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"SolidColor.create(c)\n    .colorRes(color)\n    .width(40)\n    .height(40)\n")),(0,r.mdx)("p",null,"The second child is a ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/Text.html"},"Text")," component that takes a prop named ",(0,r.mdx)("inlineCode",{parentName:"p"},"text")," and fills the remaining horizontal space available in ",(0,r.mdx)("inlineCode",{parentName:"p"},"MyComponent")," by using ",(0,r.mdx)("inlineCode",{parentName:"p"},"grow(1f)")," (equivalent to Android's ",(0,r.mdx)("inlineCode",{parentName:"p"},"layoutWeight")," from ",(0,r.mdx)("inlineCode",{parentName:"p"},"LinearLayout"),"). The text size is defined in ",(0,r.mdx)("inlineCode",{parentName:"p"},"my_text_size")," dimension resource:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"Text.create(c)\n    .text(title)\n    .textSizeRes(R.dimen.my_text_size)\n    .grow(1f)\n")),(0,r.mdx)("p",null,"The following image shows the Layout Specification Lifecycle."),(0,r.mdx)("img",{src:(0,c.default)("/images/layout-spec-lifecycle.png"),alt:"Layout Spec lifecycle flowchart",className:"white-background"}),(0,r.mdx)("p",null,"To see all the layout features that the framework exposes, refer to the ",(0,r.mdx)("a",{parentName:"p",href:"https://yogalayout.com/docs/"},"Yoga")," documentation.")),(0,r.mdx)(i.default,{value:"kotlin",mdxType:"TabItem"},(0,r.mdx)("p",null,"A ",(0,r.mdx)("em",{parentName:"p"},"layout spec")," is the logical equivalent of a composite view on Android. It simply groups existing components together in an immutable layout tree."),(0,r.mdx)("p",null,"Let's start with a simple example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},"@LayoutSpec\nobject MyComponentSpec {\n\n  @OnCreateLayout\n  fun onCreateLayout(\n      c: ComponentContext,\n      @Prop image: String,\n      @Prop(optional = true) imageAspectRatio: Float): Component =\n      Row.create(c)\n          .alignItems(CENTER)\n          .child(\n              SolidColor.create(c)\n                  .colorRes(color)\n                  .widthDip(40)\n                  .heightDip(40))\n          .child(\n              Text.create(c)\n                  .text(title)\n                  .textSizeRes(R.dimen.my_text_size)\n                  .flexGrow(1f))\n          .build()\n}\n")),(0,r.mdx)("p",null,"As you can see, layout spec classes use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"@LayoutSpec")," annotation."),(0,r.mdx)("p",null,"The method annotated with ",(0,r.mdx)("inlineCode",{parentName:"p"},"@OnCreateLayout")," must have ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/ComponentContext.html"},"ComponentContext")," as its first argument followed by a list of arguments annotated with ",(0,r.mdx)("inlineCode",{parentName:"p"},"@Prop"),". The annotation processor will validate this and other invariants in the API at build time."),(0,r.mdx)("p",null,"In the example above, the layout tree has a root ",(0,r.mdx)("em",{parentName:"p"},"Container")," with two children stacked horizontally (",(0,r.mdx)("inlineCode",{parentName:"p"},"Row.create"),") and vertically centered (",(0,r.mdx)("inlineCode",{parentName:"p"},"Align.CENTER"),")."),(0,r.mdx)("p",null,"The first child is a ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/SolidColor.html"},"SolidColor")," component that takes a ",(0,r.mdx)("inlineCode",{parentName:"p"},"colorRes")," prop and has a 40dp width and height."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},"SolidColor.create(c)\n    .colorRes(color)\n    .width(40)\n    .height(40)\n")),(0,r.mdx)("p",null,"The second child is a ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/widget/Text.html"},"Text")," component that takes a prop named ",(0,r.mdx)("inlineCode",{parentName:"p"},"text")," and fills the remaining horizontal space available in ",(0,r.mdx)("inlineCode",{parentName:"p"},"MyComponent")," by using ",(0,r.mdx)("inlineCode",{parentName:"p"},"grow(1f)")," (equivalent to Android's ",(0,r.mdx)("inlineCode",{parentName:"p"},"layoutWeight")," from ",(0,r.mdx)("inlineCode",{parentName:"p"},"LinearLayout"),"). The text size is defined in ",(0,r.mdx)("inlineCode",{parentName:"p"},"my_text_size")," dimension resource."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},"Text.create(c)\n    .text(title)\n    .textSizeRes(R.dimen.my_text_size)\n    .grow(1f)\n")),(0,r.mdx)("p",null,"The following image shows the Layout Specification Lifecycle."),(0,r.mdx)("img",{src:(0,c.default)("/images/layout-spec-lifecycle.svg"),alt:"Layout Spec lifecycle flowchart",className:"white-background"}),(0,r.mdx)("p",null,"To see all the layout features that the framework exposes, refer to the ",(0,r.mdx)("a",{parentName:"p",href:"https://yogalayout.com/docs/"},"Yoga")," documentation."))))}x.isMDXComponent=!0}}]);