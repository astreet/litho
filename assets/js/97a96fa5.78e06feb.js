"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1086],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>m,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>s,withMDXComponents:()=>p});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},i.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=o.createContext({}),p=function(e){return function(n){var t=s(n.components);return o.createElement(e,i({},n,{components:t}))}},s=function(e){var n=o.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(m.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},b=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),p=s(t),c=a,b=p["".concat(r,".").concat(c)]||p[c]||u[c]||i;return t?o.createElement(b,l(l({ref:n},m),{},{components:t})):o.createElement(b,l({ref:n},m))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=b;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var m=2;m<i;m++)r[m]=t[m];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}b.displayName="MDXCreateElement"},65767:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>m,default:()=>b,frontMatter:()=>d,metadata:()=>p,toc:()=>c});var o=t(83117),a=t(80102),i=(t(67294),t(3905)),r=t(44996),l=["components"],d={id:"mountable-bindto",title:"BindTo - Dynamic Values API"},m=void 0,p={unversionedId:"mountablecomponents/mountable-bindto",id:"mountablecomponents/mountable-bindto",title:"BindTo - Dynamic Values API",description:"Dynamic Mount Props property types enable the value of the property on the content mounted by the Mountable to be updated, without triggering a new layout (such as when animating the text colour of a Text component).",source:"@site/../docs/mountablecomponents/mountable-bindto.mdx",sourceDirName:"mountablecomponents",slug:"/mountablecomponents/mountable-bindto",permalink:"/docs/mountablecomponents/mountable-bindto",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mountablecomponents/mountable-bindto.mdx",tags:[],version:"current",frontMatter:{id:"mountable-bindto",title:"BindTo - Dynamic Values API"}},s={},c=[{value:"BindTo API in Practice",id:"bindto-api-in-practice",level:2},{value:"Key points for the BindTo API",id:"key-points-for-the-bindto-api",level:2}],u={toc:c};function b(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.mdx)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Dynamic Mount Props")," property types enable the value of the property on the content mounted by the Mountable to be updated, without triggering a new layout (such as when animating the text colour of a Text component)."),(0,i.mdx)("h2",{id:"bindto-api-in-practice"},"BindTo API in Practice"),(0,i.mdx)("p",null,"To illustrate the use of BindTo API in practice, we will implement a simple ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageViewComponent")," that will have ",(0,i.mdx)("inlineCode",{parentName:"p"},"background"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"rotation")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"scale")," properties animated, based on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SeekBar")," value."),(0,i.mdx)("p",null,"We start off by defining each ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," by using ",(0,i.mdx)("inlineCode",{parentName:"p"},"useBinding")," hooks:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt start=start_bindTo_useBinding_code end=end_bindTo_useBinding_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt",start:"start_bindTo_useBinding_code",end:"end_bindTo_useBinding_code"},"override fun ComponentScope.render(): Component? {\n  val background = useBinding(50f)\n  val rotation = useBinding(0f)\n  val scale = useBinding(1f)\n")),(0,i.mdx)("p",null,"All of the values will be attached to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SeekBar")," and will change accordingly:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt start=start_bindTo_seekbar_code end=end_bindTo_seekbar_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt",start:"start_bindTo_seekbar_code",end:"end_bindTo_seekbar_code"},'child(\n    SeekBar(\n        initialValue = 0f, label = "background", onProgressChanged = { background.set(it) }))\nchild(\n    SeekBar(\n        initialValue = 0f,\n        label = "rotation",\n        onProgressChanged = { rotation.set(evaluate(it, 0f, 360f)) }))\nchild(\n    SeekBar(\n        initialValue = 1f,\n        label = "scale",\n        onProgressChanged = { scale.set(evaluate(it, .75f, 1.25f)) }))\n')),(0,i.mdx)("p",null,"Our ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageViewComponent")," will take each ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," as a constructor parameter:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=start_bindTo_imagecomponent_code end=end_bindTo_imagecomponent_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"start_bindTo_imagecomponent_code",end:"end_bindTo_imagecomponent_code"},"class ImageViewComponent(\n    private val rotation: DynamicValue<Float>,\n    private val background: DynamicValue<Float>,\n    private val scale: DynamicValue<Float>,\n    private val style: Style? = null\n) : MountableComponent() {\n")),(0,i.mdx)("p",null,"Now, use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"bindTo")," API to bind each ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageView")," properties."),(0,i.mdx)("p",null,"There are two ways of using ",(0,i.mdx)("inlineCode",{parentName:"p"},"BindTo"),":"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"The simpler way is to create a binding between the ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," and function reference to the setter of the property.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"The setter will be invoked for every update of the DynamicValue."))),(0,i.mdx)("li",{parentName:"ol"},"The more complex binding can be achieved by using a lambda and accessing the view directly, as shown in the following snippet.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=start_bindTo_binding_code end=end_bindTo_binding_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"start_bindTo_binding_code",end:"end_bindTo_binding_code"},"// simple binding\nrotation.bindTo(0f, ImageView::setRotation)\nscale.bindTo(1f, ImageView::setScaleX)\nscale.bindTo(1f, ImageView::setScaleY)\n\n// complex binding\nbackground.bindTo(0f) { view: ImageView, value ->\n  view.setBackgroundColor(Color.HSVToColor(floatArrayOf(evaluate(value, 0f, 360f), 1f, 1f)))\n}\n")),(0,i.mdx)("p",null,"The following short video shows the BindTo API in action:"),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,r.default)("/videos/bindToAPI.mov")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("h2",{id:"key-points-for-the-bindto-api"},"Key points for the BindTo API"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"A ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," has to be bound to the Mountable in ",(0,i.mdx)("inlineCode",{parentName:"li"},"MountableComponentScope.render()"),"."),(0,i.mdx)("li",{parentName:"ul"},"A Mountable can have several dynamic props."),(0,i.mdx)("li",{parentName:"ul"},"The Binder will automatically unbind by setting the default value.")))}b.isMDXComponent=!0}}]);