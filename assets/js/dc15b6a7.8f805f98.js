"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6096],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>h,useMDXComponents:()=>s,withMDXComponents:()=>p});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},i.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),p=function(e){return function(n){var t=s(n.components);return o.createElement(e,i({},n,{components:t}))}},s=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},b=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),p=s(t),u=a,b=p["".concat(r,".").concat(u)]||p[u]||c[u]||i;return t?o.createElement(b,l(l({ref:n},d),{},{components:t})):o.createElement(b,l({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=b;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var d=2;d<i;d++)r[d]=t[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}b.displayName="MDXCreateElement"},20082:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>m,default:()=>c,frontMatter:()=>l,metadata:()=>d,toc:()=>s});var o=t(83117),a=t(80102),i=(t(67294),t(3905)),r=["components"],l={id:"mountable",title:"Lifecycle of a Mountable"},m=void 0,d={unversionedId:"mountablecomponents/mountable",id:"mountablecomponents/mountable",title:"Lifecycle of a Mountable",description:"A Mountable represents a reusable unit responsible for hosting the logic to create, measure, and bind the content that the mountable component will render.",source:"@site/../docs/mountablecomponents/mountable.mdx",sourceDirName:"mountablecomponents",slug:"/mountablecomponents/mountable",permalink:"/docs/mountablecomponents/mountable",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mountablecomponents/mountable.mdx",tags:[],version:"current",frontMatter:{id:"mountable",title:"Lifecycle of a Mountable"}},p={},s=[{value:"Lifecycle of a Mountable",id:"lifecycle-of-a-mountable",level:2},{value:"Content size measurement",id:"content-size-measurement",level:3},{value:"Creation of a Mountable",id:"creation-of-a-mountable",level:3},{value:"Content creation",id:"content-creation",level:3},{value:"Binding and unbinding content properties",id:"binding-and-unbinding-content-properties",level:3}],u={toc:s};function c(e){var n=e.components,t=(0,a.Z)(e,r);return(0,i.mdx)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"A ",(0,i.mdx)("inlineCode",{parentName:"p"},"Mountable")," represents a reusable unit responsible for hosting the logic to create, measure, and bind the content that the mountable component will render."),(0,i.mdx)("p",null,"As illustrated in the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/mountable-component#creating-a-mountable-component"},"Creating a Mountable Component")," page, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"MountableComponent.render()")," method should return a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Mountable")," implementation and any ",(0,i.mdx)("inlineCode",{parentName:"p"},"Style")," object to be applied to the component on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"MountableRenderResult")," object."),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"Mountable extends ",(0,i.mdx)("inlineCode",{parentName:"p"},"RenderUnit"),", which is a rendering primitive. For more information, see the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/introduction-to-rendercore/#renderunit"},"Introduction to RenderCore")," page.")),(0,i.mdx)("h2",{id:"lifecycle-of-a-mountable"},"Lifecycle of a Mountable"),(0,i.mdx)("p",null,"A Mountable has four important stages in its lifecycle, which must occur in the following order:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("a",{parentName:"li",href:"#content-size-measurement"},"Content size measurement")),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("a",{parentName:"li",href:"#creation-of-a-mountable"},"Creation")),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("a",{parentName:"li",href:"#content-creation"},"Content creation")),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("a",{parentName:"li",href:"#binding-and-unbinding-content-properties"},"Binding and unbinding content properties"))),(0,i.mdx)("p",null,"Each of these stages is detailed in the following sub-sections."),(0,i.mdx)("h3",{id:"content-size-measurement"},"Content size measurement"),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"This stage of the mountable's lifecycle can occur on any thread.")),(0,i.mdx)("p",null,"Each Mountable should implement a ",(0,i.mdx)("inlineCode",{parentName:"p"},"measure()")," function to define how it measures itself given arbitrary width and height specs. The ",(0,i.mdx)("inlineCode",{parentName:"p"},"MeasureResult")," object it returns contains the width and height of the content, and optionally any layout data, as shown in the following example:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=measure_example_start end=measure_example_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"measure_example_start",end:"measure_example_end"},"override fun measure(\n    context: LayoutContext<*>,\n    widthSpec: Int,\n    heightSpec: Int,\n    previousLayoutData: Any?\n): MeasureResult {\n  return if (SizeSpec.getMode(widthSpec) == SizeSpec.UNSPECIFIED &&\n      SizeSpec.getMode(heightSpec) == SizeSpec.UNSPECIFIED) {\n    MeasureResult(defaultSize, defaultSize)\n  } else {\n    MeasureResult.withEqualDimensions(widthSpec, heightSpec, null)\n  }\n}\n")),(0,i.mdx)("p",null,"To learn about the different strategies to measure content, see the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/mountable-measuring"},"Measuring")," page."),(0,i.mdx)("h3",{id:"creation-of-a-mountable"},"Creation of a Mountable"),(0,i.mdx)("p",null,"In order to create a Mountable, write a class that extends the ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/rendercore/Mountable.html"},"Mountable")," abstract class. Implementations directly extending the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Mountable")," class enable multiple ",(0,i.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/introduction-to-rendercore/#binder"},"Binders")," to be specified to set and unset properties on the mounted content (see ",(0,i.mdx)("a",{parentName:"p",href:"#binding-and-unbinding-content-properties"},"Binding and unbinding content properties"),")."),(0,i.mdx)("p",null,"In the majority of cases, a single ",(0,i.mdx)("inlineCode",{parentName:"p"},"Binder")," will be enough to implement the binding required for the ",(0,i.mdx)("inlineCode",{parentName:"p"},"MountableComponent"),"."),(0,i.mdx)("p",null,"For this reason, a ",(0,i.mdx)("inlineCode",{parentName:"p"},"SimpleMountable")," abstract class has been created, which encapsulates the logic of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Binder")," creation and addition. To implement setting and unsetting the properties of the content, just override ",(0,i.mdx)("inlineCode",{parentName:"p"},"mount()"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"unmount()"),", and, optionally, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"shouldUpdate()")," method."),(0,i.mdx)("p",null,"The following example provides an implementation of ",(0,i.mdx)("inlineCode",{parentName:"p"},"SimpleMountable")," in an ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageView"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/SimpleImageViewComponent.kt start=start_simple_mountable_example end=end_simple_mountable_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/SimpleImageViewComponent.kt",start:"start_simple_mountable_example",end:"end_simple_mountable_example"},"internal class SimpleImageViewMountable() : SimpleMountable<ImageView>(RenderType.VIEW) {\n\n  override fun createContent(context: Context): ImageView = ImageView(context)\n\n  override fun measure(\n      context: LayoutContext<*>,\n      widthSpec: Int,\n      heightSpec: Int,\n      previousLayoutData: Any?\n  ): MeasureResult {\n    return if (SizeSpec.getMode(widthSpec) == SizeSpec.UNSPECIFIED &&\n        SizeSpec.getMode(heightSpec) == SizeSpec.UNSPECIFIED) {\n      MeasureResult(defaultSize, defaultSize)\n    } else {\n      MeasureResult.withEqualDimensions(widthSpec, heightSpec, null)\n    }\n  }\n\n  override fun mount(c: Context, content: ImageView, layoutData: Any?) {\n    content.setImageDrawable(c.resources.getDrawable(R.drawable.ic_launcher))\n  }\n\n  override fun unmount(c: Context, content: ImageView, layoutData: Any?) {\n    content.setImageResource(0)\n  }\n}\n")),(0,i.mdx)("h3",{id:"content-creation"},"Content creation"),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"This stage of the mountable's lifecycle can only occur on the main thread.")),(0,i.mdx)("p",null,"Each Mountable needs to create the content it hosts (either a ",(0,i.mdx)("inlineCode",{parentName:"p"},"View")," or a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Drawable"),") via a ",(0,i.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/introduction-to-rendercore/#contentallocator"},"ContentAllocator"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=create_content_example_start end=create_content_example_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"create_content_example_start",end:"create_content_example_end"},"override fun createContent(context: Context): ImageView = ImageView(context)\n")),(0,i.mdx)("p",null,"You should also pass the type of the created content to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Mountable")," super constructor, either ",(0,i.mdx)("inlineCode",{parentName:"p"},"RenderType.VIEW")," for views or ",(0,i.mdx)("inlineCode",{parentName:"p"},"RenderType.DRAWABLE")," for drawables."),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"The content should not be mutated based on props passed from MountableComponent to the Mountable.")),(0,i.mdx)("p",null,"In order to optimize the mount performance, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ContentAllocator")," can also be used to define ",(0,i.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/mountable-preallocation"},"content pooling"),"."),(0,i.mdx)("h3",{id:"binding-and-unbinding-content-properties"},"Binding and unbinding content properties"),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"This stage of the mountable's lifecycle can only occur on the main thread.")),(0,i.mdx)("p",null,"A Mountable uses one or more ",(0,i.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/introduction-to-rendercore/#binder"},"Binders")," to ",(0,i.mdx)("inlineCode",{parentName:"p"},"bind()")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"unbind()")," properties on the mounted content."),(0,i.mdx)("p",null,"Each Binder should implement 3 methods:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"bind()")," - used to set properties."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"unbind()")," - used to unset properties."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"shouldUpdate()")," - used to decide whether properties need resetting.")),(0,i.mdx)("p",null,"The following code shows a component that extends ",(0,i.mdx)("inlineCode",{parentName:"p"},"SimpleMountable"),", where mount() is the equivalent of bind() and unmount() is the equivalent of unbind():"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=mount_unmount_example_start end=mount_unmount_example_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"mount_unmount_example_start",end:"mount_unmount_example_end"},"override fun mount(c: Context, content: ImageView, layoutData: Any?) {\n  content.setImageDrawable(c.getResources().getDrawable(R.drawable.ic_launcher))\n}\n\noverride fun unmount(c: Context, content: ImageView, layoutData: Any?) {\n  content.setImageResource(0)\n  content.rotation = 0f\n  content.scaleX = 1f\n  content.scaleY = 1f\n  content.setBackgroundColor(Color.BLACK)\n}\n")),(0,i.mdx)("p",null,"Each ",(0,i.mdx)("inlineCode",{parentName:"p"},"Binder")," should be added to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Mountable")," using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"addMountUnmountExtension()")," method."),(0,i.mdx)("admonition",{title:"Important",type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"Once set, a property should be unset in the matching ",(0,i.mdx)("inlineCode",{parentName:"p"},"unbind()")," method to ensure correctness when the content is reused.")))}c.isMDXComponent=!0}}]);